{"ast":null,"code":"var _jsxFileName = \"/Users/tesnorcarly/Desktop/calendar-reminder/src/components/monthlyCalendar/CalendarGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHover } from \"../../hooks/useHover\";\nimport useModal from \"../../hooks/useModal\";\nimport { color } from \"../../utils/constants\";\nimport { defaultStyle } from \"../../utils/DefaultDayStyle\";\nimport Modal from \"../reminder/Modal\";\nimport ReminderList from \"../reminder/ReminderList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CalendarGrid = _ref => {\n  _s();\n\n  let {\n    day\n  } = _ref;\n  const {\n    showModal,\n    toggleModal\n  } = useModal();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [hover, setHover] = useHover();\n\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    toggleModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      showModal: showModal,\n      hide: toggleModal,\n      day: selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: hover,\n      style: { ...differentStyle(day),\n        ...(setHover ? styles.hover : null)\n      },\n      onClick: () => {\n        handleDateClick(day.key);\n      },\n      children: [day.text, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.reminderContainer,\n        children: /*#__PURE__*/_jsxDEV(ReminderList, {\n          day: day.key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CalendarGrid, \"zbplP2Ly6osgQvFjG/pEOhQ6t9s=\", false, function () {\n  return [useModal, useHover];\n});\n\n_c = CalendarGrid;\nexport default CalendarGrid;\n\nconst differentStyle = date => {\n  return date.is_offset && date.isWeekend ? styles.offsetWeekendDay : date.is_offset ? styles.previousMonthDay : date.isWeekend ? styles.weekendDay : styles.listOfDays;\n};\n\nconst styles = {\n  listOfDays: { ...defaultStyle,\n    backgroundColor: color.tertiary,\n    fontWeight: \"bold\"\n  },\n  weekendDay: { ...defaultStyle,\n    backgroundColor: \"#F2F2F2\",\n    fontWeight: \"bold\",\n    color: \"#2f74b5\"\n  },\n  previousMonthDay: { ...defaultStyle,\n    color: \"rgb(156 163 175)\",\n    backgroundColor: color.tertiary\n  },\n  offsetWeekendDay: { ...defaultStyle,\n    backgroundColor: \"#F2F2F2\",\n    color: \"rgb(156 163 175)\",\n    paddingLeft: \"0.7rem\"\n  },\n  reminderContainer: {\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"7rem\",\n    minHeight: \"1.5rem\",\n    paddingTop: \"1.3rem\"\n  },\n  hover: {\n    backgroundColor: color.primary,\n    color: color.tertiary\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarGrid\");","map":{"version":3,"names":["React","useState","useHover","useModal","color","defaultStyle","Modal","ReminderList","CalendarGrid","day","showModal","toggleModal","selectedDate","setSelectedDate","hover","setHover","handleDateClick","date","differentStyle","styles","key","text","reminderContainer","is_offset","isWeekend","offsetWeekendDay","previousMonthDay","weekendDay","listOfDays","backgroundColor","tertiary","fontWeight","paddingLeft","zIndex","position","width","minHeight","paddingTop","primary"],"sources":["/Users/tesnorcarly/Desktop/calendar-reminder/src/components/monthlyCalendar/CalendarGrid.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { useHover } from \"../../hooks/useHover\";\nimport useModal from \"../../hooks/useModal\";\nimport { color } from \"../../utils/constants\";\nimport { defaultStyle } from \"../../utils/DefaultDayStyle\";\nimport Modal from \"../reminder/Modal\";\nimport ReminderList from \"../reminder/ReminderList\";\n\nconst CalendarGrid = ({ day }) => {\n  const { showModal, toggleModal } = useModal();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [hover, setHover] = useHover();\n\n  const handleDateClick = (date) => {\n    setSelectedDate(date);\n    toggleModal();\n  };\n\n  return (\n    <>\n      <Modal showModal={showModal} hide={toggleModal} day={selectedDate} />\n      <div\n        ref={hover}\n        style={{\n          ...differentStyle(day),\n          ...(setHover ? styles.hover : null),\n        }}\n        onClick={() => {\n          handleDateClick(day.key);\n        }}\n      >\n        {day.text}\n        <div style={styles.reminderContainer}>\n          <ReminderList day={day.key} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CalendarGrid;\n\nconst differentStyle = (date) => {\n  return date.is_offset && date.isWeekend\n    ? styles.offsetWeekendDay\n    : date.is_offset\n    ? styles.previousMonthDay\n    : date.isWeekend\n    ? styles.weekendDay\n    : styles.listOfDays;\n};\n\nconst styles = {\n  listOfDays: {\n    ...defaultStyle,\n    backgroundColor: color.tertiary,\n    fontWeight: \"bold\",\n  },\n  weekendDay: {\n    ...defaultStyle,\n    backgroundColor: \"#F2F2F2\",\n    fontWeight: \"bold\",\n    color: \"#2f74b5\",\n  },\n  previousMonthDay: {\n    ...defaultStyle,\n    color: \"rgb(156 163 175)\",\n    backgroundColor: color.tertiary,\n  },\n  offsetWeekendDay: {\n    ...defaultStyle,\n    backgroundColor: \"#F2F2F2\",\n    color: \"rgb(156 163 175)\",\n    paddingLeft: \"0.7rem\",\n  },\n  reminderContainer: {\n    zIndex: 1,\n    position: \"absolute\",\n    width: \"7rem\",\n    minHeight: \"1.5rem\",\n    paddingTop: \"1.3rem\",\n  },\n  hover: {\n    backgroundColor: color.primary,\n    color: color.tertiary,\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}